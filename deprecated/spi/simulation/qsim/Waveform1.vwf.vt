// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/14/2024 20:02:33"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          spi_toplevel
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module spi_toplevel_vlg_vec_tst();
// constants                                           
// general purpose registers
reg i_clk;
reg i_csn;
reg i_rstn;
reg i_spi_clk;
// wires                                               
wire o_datasent;
wire o_miso;

// assign statements (if any)                          
spi_toplevel i1 (
// port map - connection between master ports and signals/registers   
	.i_clk(i_clk),
	.i_csn(i_csn),
	.i_rstn(i_rstn),
	.i_spi_clk(i_spi_clk),
	.o_datasent(o_datasent),
	.o_miso(o_miso)
);
initial 
begin 
#1000000 $finish;
end 

// i_clk
always
begin
	i_clk = 1'b0;
	i_clk = #5000 1'b1;
	#5000;
end 

// i_spi_clk
initial
begin
	i_spi_clk = 1'b0;
	i_spi_clk = #100000 1'b1;
	# 20000;
	repeat(9)
	begin
		i_spi_clk = 1'b0;
		i_spi_clk = #20000 1'b1;
		# 20000;
	end
	i_spi_clk = 1'b0;
	i_spi_clk = #220000 1'b1;
	# 20000;
	repeat(7)
	begin
		i_spi_clk = 1'b0;
		i_spi_clk = #20000 1'b1;
		# 20000;
	end
end 

// i_csn
initial
begin
	i_csn = 1'b1;
	i_csn = #60000 1'b0;
end 

// i_rstn
initial
begin
	i_rstn = 1'b1;
end 
endmodule

