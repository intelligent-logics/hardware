// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/13/2024 16:27:41"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          shiftregister
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module shiftregister_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg data_recieve;
reg direction;
reg parallel_enable;
reg [7:0] parallel_input;
reg rstn;
reg shift;
// wires                                               
wire data_transmit;
wire [7:0] parallel_output;

// assign statements (if any)                          
shiftregister i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.data_recieve(data_recieve),
	.data_transmit(data_transmit),
	.direction(direction),
	.parallel_enable(parallel_enable),
	.parallel_input(parallel_input),
	.parallel_output(parallel_output),
	.rstn(rstn),
	.shift(shift)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 

// data_recieve
initial
begin
	data_recieve = 1'b1;
end 

// parallel_enable
initial
begin
	parallel_enable = 1'b0;
	parallel_enable = #90000 1'b1;
	parallel_enable = #10000 1'b0;
	parallel_enable = #10000 1'b1;
	parallel_enable = #10000 1'b0;
end 

// direction
initial
begin
	direction = 1'b0;
	direction = #110000 1'b1;
	direction = #10000 1'b0;
	direction = #10000 1'b1;
	direction = #10000 1'b0;
	direction = #10000 1'b1;
	direction = #70000 1'b0;
end 

// shift
initial
begin
	shift = 1'b0;
	shift = #10000 1'b1;
	shift = #80000 1'b0;
	shift = #40000 1'b1;
	shift = #10000 1'b0;
	shift = #10000 1'b1;
	shift = #70000 1'b0;
end 

// rstn
initial
begin
	rstn = 1'b0;
	rstn = #10000 1'b1;
end 
// parallel_input[ 7 ]
initial
begin
	parallel_input[7] = 1'b0;
end 
// parallel_input[ 6 ]
initial
begin
	parallel_input[6] = 1'b1;
end 
// parallel_input[ 5 ]
initial
begin
	parallel_input[5] = 1'b0;
end 
// parallel_input[ 4 ]
initial
begin
	parallel_input[4] = 1'b1;
end 
// parallel_input[ 3 ]
initial
begin
	parallel_input[3] = 1'b0;
end 
// parallel_input[ 2 ]
initial
begin
	parallel_input[2] = 1'b1;
end 
// parallel_input[ 1 ]
initial
begin
	parallel_input[1] = 1'b0;
end 
// parallel_input[ 0 ]
initial
begin
	parallel_input[0] = 1'b1;
end 
endmodule

