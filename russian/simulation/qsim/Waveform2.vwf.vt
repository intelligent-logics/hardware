// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/21/2024 18:13:30"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          russian_core
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module russian_core_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk50mhz;
reg rstn;
// wires                                               
wire [15:0] debug_addressoutput;
wire debug_clk;
wire [7:0] debug_dataoutput;

// assign statements (if any)                          
russian_core i1 (
// port map - connection between master ports and signals/registers   
	.clk50mhz(clk50mhz),
	.debug_addressoutput(debug_addressoutput),
	.debug_clk(debug_clk),
	.debug_dataoutput(debug_dataoutput),
	.rstn(rstn)
);
initial 
begin 
#1000000 $finish;
end 

// clk50mhz
always
begin
	clk50mhz = 1'b0;
	clk50mhz = #5000 1'b1;
	#5000;
end 

// rstn
initial
begin
	rstn = 1'b0;
	rstn = #10000 1'b1;
end 
endmodule

